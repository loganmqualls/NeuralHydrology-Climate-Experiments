# --- Experiment configurations --------------------------------------------------------------------

# experiment name, used as folder name
experiment_name: dummy_run

# place to store run directory (if empty runs are stored in code_dir/runs/)
run_dir: dummy_dir

# files to specify training, validation and test basins (relative to code root or absolute path)
train_basin_file: dummy_basin_list
# validation_basin_file: dummy_basin_list
test_basin_file: dummy_basin_list

# training, validation and test time periods (format = 'dd/mm/yyyy')
# train_start_date:
# train_end_date:
validation_start_date: '01/10/2000'
validation_end_date: '02/10/2000'
test_start_date: '01/10/1980'
test_end_date: '30/12/2014'

# if you want to use different (continuous or split) periods per basin (and period) define path to pickle files here.
per_basin_train_periods_file: dummy_train_dates_file
# per_basin_validation_periods_file:
# per_basin_test_periods_file: dummy_test_dates_file

# fixed seed, leave empty to use a random seed
seed: dummy_seed

# which GPU (id) to use [in format of cuda:0, cuda:1 etc, or cpu or None]
device: cuda:0

# --- Validation configuration ---------------------------------------------------------------------

# specify after how many epochs to perform validation
validate_every: 50

# specify how many random basins to use for validation
validate_n_random_basins: 4

# specify which metrics to calculate during validation (see neuralhydrology.evaluation.metrics)
# this can either be a list or a dictionary. If a dictionary is used, the inner keys must match the name of the
# target_variable specified below. Using dicts allows for different metrics per target variable.
metrics:
- NSE
- KGE
- Alpha-NSE
- Beta-NSE

# --- Model configuration --------------------------------------------------------------------------

# base model type [cudalstm, customlstm, ealstm, embcudalstm, mtslstm, gru, transformer]
# (has to match the if statement in modelzoo/__init__.py)
model: cudalstm

# prediction head [regression]. Define the head specific parameters below
head: regression

# ----> Regression settings <----
output_activation: linear

# # ----> Embedding network settings <----

# ...

# # ----> MTSLSTM settings <----

# ...

# # ----> ODE-LSTM settings <----

#...

# # ----> Transformer settings <----

# ...

# # ----> General settings <----

# Number of cell states of the LSTM
hidden_size: 256

# Initial bias value of the forget gate
initial_forget_bias: 3

# Dropout applied to the output of the LSTM
output_dropout: 0.4

# --- Training configuration -----------------------------------------------------------------------

# specify optimizer [Adam]
optimizer: Adam

# specify loss [MSE, NSE, RMSE]
loss: NSE

# ...

# specify learning rates to use starting at specific epochs (0 is the initial learning rate)
learning_rate:
    0: 1e-3
    10: 5e-4
    20: 1e-4

# Mini-batch size
batch_size: 256

# Number of training epochs
epochs: 30

# ...

# If a value, clips the gradients during training to that norm.
clip_gradient_norm: 1

# ...

# Defines which time steps are used to calculate the loss. Can't be larger than seq_length.
# If use_frequencies is used, this needs to be a dict mapping each frequency to a predict_last_n-value, else an int.
predict_last_n: 1

# Length of the input sequence
# If use_frequencies is used, this needs to be a dict mapping each frequency to a seq_length, else an int.
seq_length: 365

# Number of parallel workers used in the data pipeline
num_workers: 2

# Log the training loss every n steps
log_interval: 100000000000

# If true, writes logging results into tensorboard file
log_tensorboard: false

# If a value and greater than 0, logs n random basins as figures during validation
log_n_figures: -1

# Save model weights every n epochs
save_weights_every: 5

# ...


# --- Data configurations --------------------------------------------------------------------------

# which data set to use [camels_us, camels_gb, global, hourly_camels_us, camels_cl, generic]
dataset: camels_us

# Path to data set root
data_dir: dummy_camels_v1p2

save_train_data: True

# ...

# Forcing product [daymet, maurer, maurer_extended, nldas, nldas_extended, nldas_hourly]
# can be either a list of forcings or a single forcing product
forcings: dummy_forcing

# ...

dynamic_inputs:
- dummy_dyn

# which columns to use as target
target_variables:
- QObs(mm/d)

# clip negative predictions to zero for all variables listed below. Should be a list, even for single variables.
clip_targets_to_zero:
- QObs(mm/d)

# Which CAMELS attributes to use. Leave empty if none should be used
static_attributes:
- elev_mean
- slope_mean
- area_gages2
- frac_forest
- lai_max
- lai_diff
- gvf_max
- gvf_diff
- soil_depth_pelletier
- soil_depth_statsgo
- soil_porosity
- soil_conductivity
- max_water_content
- sand_frac
- silt_frac
- clay_frac
- carbonate_rocks_frac
- geol_permeability

# Path to pickle file(s) containing additional data. Each pickle file must contain a dictionary
# with one key for each basin and the value is a time indexed data frame, where each column is a 
# feature.
# Convention: If a column is used as static input, the value to use for specific sample should be in
# same row (datetime) as the target discharge value.
additional_feature_files: dummy_dyn_clim_file

# columns of the data frame to use as (additional) "static" inputs for each sample. Must be present in
# the above linked additional feature files. These values will be used as static inputs, but they can evolve over time.
# Leave empty to not use any.
evolving_attributes:
- p_mean_dyn
- pet_mean_dyn
- aridity_dyn
- frac_snow_dyn
- high_prec_freq_dyn
- high_prec_dur_dyn
- low_prec_freq_dyn
- low_prec_dur_dyn

# whether to use basin id one hot encoding as (additional) static input
use_basin_id_encoding: False